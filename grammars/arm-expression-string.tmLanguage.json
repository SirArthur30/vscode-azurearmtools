{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "ARM Template",
	"scopeName": "source.expression-string.arm-deployment",
	"uuid": "3ADA43CD-2258-4907-8477-169A7FDDF216",
	"$preprocessComment": "Items in the preprocess section get replaced during gulp build-grammars",
	"$preprocessComment2": "The {{builtin}} key/value are special - they're created during build from our function metadata",
	"preprocess": {
		"id": "(?:[_$[:alpha:]][_$[:alnum:]]*)",
		"ns-userfunc": "(?:{{id}}\\s*(\\.)\\s*{{id}})",
		"scope-expression-start": "keyword.other.expression.begin.arm-deployment",
		"scope-expression-end": "keyword.other.expression.end.arm-deployment",
		"scope-builtin": "support.function.builtin.arm-deployment",
		"scope-parameters": "support.constant.parameters.arm-deployment",
		"scope-variables": "variable.language.variables.arm-deployment",
		"scope-unknownfunction": "entity.name.function.arm-deployment",
		"scope-usernamespaceandfunction": "support.class.userfunction.arm-deployment",
		"scope-usernamespaceandfunction-dot": "punctuation.accessor.userfunction.arm-deployment",
		"scope-parentheses-grouping": "meta.brace.round.arm-deployment",
		"scope-parentheses-funccall": "meta.brace.round.arm-deployment",
		"scope-escapedapostrophe": "constant.escape.string.arm-deployment",
		"scope-string-contents": "string.quoted.single.arm-deployment",
		"scope-string-start": "punctuation.definition.string.begin.arm-deployment",
		"scope-string-end": "punctuation.definition.string.end.arm-deployment",
		"scope-funcargs-separator": "punctuation.separator.comma",
		"scope-number": "constant.numeric.arm-deployment",
		"scope-propaccess-dot": "punctuation.accessor.property.arm-deployment",
		"scope-propaccess-propname": "entity.name.tag.property.arm-deployment",
		"scope-arrayaccess-brackets": "meta.brace.square"
	},
	"patterns": [
		{
			"include": "#expressionstring"
		}
	],
	"repository": {
		"expressionstring": {
			"name": "meta.expression.arm-deployment",
			"begin": "\"\\[(?!\\[)",
			"$beginComment": "A string that starts with [[ is not an expression",
			"end": "\\]\"",
			"beginCaptures": {
				"0": {
					"name": "{{scope-expression-start}}"
				}
			},
			"endCaptures": {
				"0": {
					"name": "{{scope-expression-end}}"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				},
				{
					"name": "invalid.illegal.expected-expression.arm-deployment",
					"match": "[^\\s]"
				}
			]
		},
		"expression": {
			"patterns": [
				{
					"include": "#string"
				},
				{
					"include": "#number"
				},
				{
					"include": "#functioncall"
				},
				{
					"include": "#propertyaccess"
				},
				{
					"include": "#arrayaccess"
				},
				{
					"name": "{{scope-parentheses-grouping}}",
					"$comment": "Parentheses grouping an expression",
					"begin": "\\s*\\(\\s*",
					"end": "\\s*\\)\\s*",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			]
		},
		"number": {
			"name": "{{scope-number}}",
			"match": "[+-]?[0-9]+(\\.[0-9]+)?([Ee][+-]?[0-9]+)?"
		},
		"string": {
			"name": "{{scope-string-contents}}",
			"begin": "[']",
			"beginCaptures": {
				"0": {
					"$comment": "Apostrophe that starts a string",
					"name": "{{scope-string-start}}"
				}
			},
			"end": "['](?!['])",
			"endCaptures": {
				"0": {
					"$comment": "Apostrophe that ends a string",
					"name": "{{scope-string-end}}"
				}
			},
			"patterns": [
				{
					"include": "#stringcontent"
				}
			]
		},
		"stringcontent": {
			"patterns": [
				{
					"name": "{{scope-escapedapostrophe}}",
					"match": "['][']"
				}
			]
		},
		"functioncall": {
			"name": "meta.function-call.arm-deployment",
			"begin": "(?x)(?i) \\s* (?: ({{ns-userfunc}}) | (parameters) | (variables) | ({{builtin}}) | ({{id}}) ) \\s*([(])",
			"end": "\\)",
			"beginCaptures": {
				"1": {
					"$comment": "namespace + user function name",
					"name": "{{scope-usernamespaceandfunction}}"
				},
				"2": {
					"$comment": "dot from capturing group inside ns-userfunc",
					"name": "{{scope-usernamespaceandfunction-dot}}"
				},
				"3": {
					"$comment": "parameters",
					"name": "{{scope-parameters}}"
				},
				"4": {
					"$comment": "variables",
					"name": "{{scope-variables}}"
				},
				"5": {
					"$comment": "built-in function name",
					"name": "{{scope-builtin}}"
				},
				"6": {
					"$comment": "other function name",
					"name": "{{scope-unknownfunction}}"
				},
				"7": {
					"$comment": "open paren",
					"name": "{{scope-parentheses-funccall}}"
				}
			},
			"endCaptures": {
				"0": {
					"$comment": "closing paren",
					"name": "{{scope-parentheses-funccall}}"
				}
			},
			"patterns": [
				{
					"include": "#functionargs"
				}
			]
		},
		"functionargs": {
			"name": "meta.function-arguments.arm-deployment",
			"begin": "\\G\\s*",
			"end": "\\s*(?=\\))",
			"patterns": [
				{
					"include": "#expression"
				},
				{
					"name": "{{scope-funcargs-separator}}",
					"match": ","
				},
				{
					"match": "[^\\s,)]",
					"name": "invalid.illegal.expected-comma.arm-deployment"
				}
			]
		},
		"propertyaccess": {
			"name": "meta.property-access.arm-deployment",
			"match": "(?x) \\s* (?<=[)\\][:alnum:]_$]) (?# if preceded by end paren/bracket/word)  \\s*  (?<dot>\\.) \\s* (?<propertyname>{{id}})",
			"captures": {
				"1": {
					"name": "{{scope-propaccess-dot}}"
				},
				"2": {
					"name": "{{scope-propaccess-propname}}"
				}
			}
		},
		"arrayaccess": {
			"patterns": [
				{
					"match": "\\s*\\[\\s*\\]",
					"name": "invalid.illegal.empty-array-access.arm-deployment"
				},
				{
					"name": "meta.array-access.arm-deployment",
					"begin": "(?x) \\s* (?<=[)\\][:alnum:]_$]) (?# if preceded by end paren/bracket/word)  \\s*  (?<openbracket>\\[)",
					"end": "\\s*(])",
					"beginCaptures": {
						"1": {
							"name": "{{scope-arrayaccess-brackets}}"
						}
					},
					"endCaptures": {
						"1": {
							"name": "{{scope-arrayaccess-brackets}}"
						}
					},
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			]
		}
	}
}
